#!/usr/bin/python3
"""
Verify the .md5sums-files stored in DPKG's database
"""
import os
import subprocess
import sys
import tempfile
import time
import dpkg_db
import dpkg_utils


COLOR_RED = "\033[31m"
COLOR_GREEN = "\033[32m"
COLOR_NORMAL = "\033[0m"

DB_PATH = '/var/lib/dpkg'
DOWNLOAD_LOCATION = '/tmp/deb_cache'


def unpack_pkg(filename, dst):
    pkg_dir = os.path.join(dst, 'u')
    control_dir = os.path.join(dst, 'c')

    os.mkdir(pkg_dir)
    os.mkdir(control_dir)

    ret = subprocess.run(['ar', 'x', filename, 'control.tar.gz', 'control.tar.xz'],
            stderr=subprocess.DEVNULL, cwd=pkg_dir)

    if ret.returncode != 0:
        raise RuntimeError("ar failed")

    ctrl = os.path.join(pkg_dir, 'control.tar.gz')
    if not os.path.isfile(ctrl):
        ctrl = os.path.join(pkg_dir, 'control.tar.xz')

    ret = subprocess.run(['tar', '-xf', ctrl,
        '-C', control_dir, './md5sums'])

    if ret.returncode != 0:
        raise ExtractException


def main():
    db = dpkg_db.DPKGDB(DB_PATH)
    db.read_status()

    failed_pkgs = {}

    # Download deb packages
    if not os.path.isdir(DOWNLOAD_LOCATION):
        os.mkdir(DOWNLOAD_LOCATION)

    for pkg in db:
        pkg_key = dpkg_db.gen_pkg_key(pkg)
        deb_filename = dpkg_utils.gen_deb_filename(pkg)

        if not os.path.isfile(os.path.join(DOWNLOAD_LOCATION, deb_filename)):
            print("Downloading %s:%s=%s ... " % (pkg['Package'], pkg['Architecture'], pkg['Version']),
                    end='', flush=True)

            try:
                dpkg_utils.download(pkg, DOWNLOAD_LOCATION)
                print(COLOR_GREEN + "ok" + COLOR_NORMAL)
            except dpkg_utils.DownloadFailed as e:
                print(COLOR_RED + "FAILED" + COLOR_NORMAL)
                failed_pkgs[pkg_key] = e


    # Verify deb packages
    for pkg in db:
        pkg_key = dpkg_db.gen_pkg_key(pkg)
        if pkg_key in failed_pkgs:
            continue

        # if pkg['Package'] in ('atom', 'binutils-doc', 'code'):
        #     failed_pkgs[pkg_key] = "Excluded manually"
        #     continue

        with tempfile.TemporaryDirectory() as d:
            print("Verifying %s:%s=%s ... " % (pkg['Package'], pkg['Architecture'], pkg['Version']),
                    end='', flush=True)

            deb_filename = os.path.join(DOWNLOAD_LOCATION, dpkg_utils.gen_deb_filename(pkg))
            if not os.path.isfile(deb_filename):
                failed_pkgs[pkg_key] = 'No .deb file'
                print(COLOR_RED + "FAILED" + COLOR_NORMAL)
                continue

            try:
                unpack_pkg(deb_filename, d)
            except ExtractException:
                failed_pkgs[pkg_key] = 'Failed to extract md5sums'
                print(COLOR_RED + "FAILED" + COLOR_NORMAL)
                continue

            ref = os.path.join(d, 'c', 'md5sums')
            real1 = os.path.join(DB_PATH, 'info', pkg['Package'] + '.md5sums')
            real2 = os.path.join(DB_PATH, 'info', pkg['Package'] + ':' + pkg['Architecture'] + '.md5sums')
            e1 = os.path.isfile(real1)
            e2 = os.path.isfile(real2)

            if e1 and e2:
                raise RuntimeError("md5sums db contradiction")
            elif not e1 and not e2:
                raise RuntimeError("md5sums db missing")

            real = real1 if e1 else real2

            if subprocess.run(['cmp', ref, real], cwd=d).returncode == 0:
                print(COLOR_GREEN + "ok" + COLOR_NORMAL)
            else:
                print(COLOR_RED + "FAILED" + COLOR_NORMAL)
                failed_pkgs[pkg_key] = "md5sum missmatch"


    if failed_pkgs:
        print("\nThe following errors occured:")

        for k, v in failed_pkgs.items():
            print("Pkg: %s, error: %s" % k, v)

    else:
        print("\nNo errors occured.")


#******************************* Exceptions ***********************************
class ExtractException(Exception):
    pass


if __name__ == '__main__':
    main()
